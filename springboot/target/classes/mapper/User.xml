<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.lengs.springboot.mapper.UserMapper">
    <insert id="addUer">
        <!-- 如果user表中找不到相同ID的用户则新建一个 -->
        INSERT INTO User(userId, userType, userRealName, userName, password, sexual, accountChangeTime,accountCreateTime, phoneNum, email, ancestralPlace, politicalStatus, groupID, registerCode, userAge,userAcademy,userMajor,userClass)
        VALUES(#{userId}, #{userType}, #{userRealName}, #{userName}, #{password}, #{sexual}, #{accountChangeTime},#{accountCreateTime},#{phoneNum}, #{email}, #{ancestralPlace}, #{politicalStatus}, #{groupID}, #{registerCode}, #{userAge}, #{userAcademy}, #{userMajor}, #{userClass})
            ON DUPLICATE KEY UPDATE
                userId = VALUES(userId),
                userType = VALUES(userType),
                userRealName = VALUES(userRealName),
                userName = VALUES(userName),
                password = VALUES(password),
                sexual = VALUES(sexual),
                accountChangeTime = VALUES(accountChangeTime),
                phoneNum = VALUES(phoneNum),
                email = VALUES(email),
                ancestralPlace = VALUES(ancestralPlace),
                politicalStatus = VALUES(politicalStatus),
                groupID = VALUES(groupID),
                registerCode = VALUES(registerCode),
                userAge = VALUES(userAge),
                userAcademy = VALUES(userAcademy),
                userMajor = VALUES(userMajor),
                userClass = VALUES(userClass)
    </insert>
    <delete id="deleteById">
        DELETE FROM User WHERE userId = #{userId}
    </delete>
    <select id="list" resultType="org.lengs.springboot.entity.User">
        select * from User
    </select>
    <select id="listByCondition" resultType="org.lengs.springboot.entity.User">
        select * from User
                 <where>
                     <if test="userType != null and userType != ''">
                         userType = #{ userType }
                     </if>
                     <if test="userRealName != null and userRealName != ''">
                         and userRealName like concat('%', #{ userRealName } , '%')
                     </if>
                     <if test="userId != null and userId != ''">
                         and userId like concat('%', #{ userId } , '%')
                     </if>
                 </where>
    </select>
    <select id="login">
        select * from User where userName = #{ userName } and password = #{ password }
    </select>
</mapper>